//concept :-
stand at any particular i , and see if the elements>elements @ i.. from i+1 to n-1 
store that value in mx, and update mx @ every i

int maxProfit(vector<int>& prices) {
       
        int n = prices.size();
        for(int i=0; i<n; i++){
            int ele = search(prices,prices[i],i+1,n-1);
            int temp;
            
          temp = ele-prices[i];
          mx = max(mx, temp)  ;
        }
        return mx;
    }
    
    TLE
    T= O(N2)
    
    
    
    -----------optimize------------
    int maxProfit(vector<int>& prices) {
       
        int n = prices.size();
        int mx = INT_MIN;
        int mx2=INT_MIN;
        vector<int>v(n);
        for(int i=n-1; i>=0; i--){
            mx = max(mx,prices[i]);
            v[i]=mx;
        }
        for(int i=0; i<n; i++){
            mx2 = max(mx2, v[i]-prices[i]);
        }
        return mx2;
    }
    
    T = O(N)
    S = O(n)


